name: Fuzz Testing

on:
  schedule:
    - cron: '20 11 * * *'  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Setup phase
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install os dependencies
      run: |
        sudo apt-get update
        # Use -o to set the APT directory - this will use the cached directory
        sudo apt-get install -y -o dir::cache::archives=/var/cache/apt/archives \
          libcairo2-dev libgirepository1.0-dev libgrpc-dev libprotobuf-dev libgrpc++-dev \
          build-essential autoconf libtool pkg-config cmake doxygen \
          libgrpc-dev protobuf-compiler protobuf-compiler-grpc mkcert
  
    - name: Install Envoy
      run: |
        # Direct binary installation - most reliable method
        echo "Installing Envoy binary directly"
        curl -Lo /tmp/envoy https://github.com/envoyproxy/envoy/releases/download/v1.32.1/envoy-1.32.1-linux-x86_64
        sudo install -m 755 /tmp/envoy /usr/local/bin/envoy
        # Verify installation
        envoy --version
  
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'
    
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python_services/terrain_generation/requirements.txt
        pip install -r python_services/persistence/requirements.txt
    
    - name: Install javascript dependencies
      run: |
        cd javascript_services/vie_ui
        npm install 
        chmod +x node_modules/.bin/protoc-gen-js || echo "File not found or already executable"
        chmod +x node_modules/.bin/protoc-gen-grpc-web || echo "File not found or already executable"
        echo "PATH=$PWD/node_modules/.bin:$PATH" >> $GITHUB_ENV
        # Create symlinks to standard locations as fallback
        sudo mkdir -p /usr/local/bin
        sudo ln -sf $PWD/node_modules/.bin/protoc-gen-js /usr/local/bin/ || echo "Could not create symlink"
        sudo ln -sf $PWD/node_modules/.bin/protoc-gen-grpc-web /usr/local/bin/ || echo "Could not create symlink"
  
    # Cache mkcert data directory
    - name: Cache mkcert data
      uses: actions/cache@v3
      with:
        path: ~/Library/Application Support/mkcert
        key: ${{ runner.os }}-mkcert
  
    - name: Install mkcert
      run: |
        mkcert -install
  
    - name: Install CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.28.3'  # Specify the required CMake version
  
    # Cache CMake build artifacts
    - name: Cache CMake build
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt', 'python_services/**/*.proto') }}
        restore-keys: |
          ${{ runner.os }}-cmake-
  
    - name: Create build directory
      run: mkdir -p build
  
    - name: Configure CMake
      run: cmake -S . -B build
  
    - name: Build with CMake
      run: cmake --build build -j $(nproc)  # Use parallel compilation
  
    # Generate SSL certificates
    - name: Generate SSL certificates
      run: |
        mkdir -p certs
        mkcert -install
        mkcert -cert-file certs/localhost.pem -key-file certs/localhost-key.pem localhost 127.0.0.1 ::1
        
    - name: Start application
      if: success()
      run: |
        ./script/start.sh
        echo "Waiting for app to fully initialize..."
        sleep 10
      
  fuzz:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up ZAP
      run: |
        sudo apt-get update
        sudo apt-get install -y zaproxy

    - name: Run ZAP Fuzz Tests
      run: |
        # Start ZAP in daemon mode
        zap.sh -daemon -port 8080 -config api.disablekey=true
        
        # Wait for ZAP to start
        sleep 10
        
        # Run a fuzz test against your service
        zap-cli --zap-url http://localhost:8080 --zap-path /usr/share/zaproxy fuzz -r https://localhost:3001
        
        # Generate a report
        zap-cli --zap-url http://localhost:8080 --zap-path /usr/share/zaproxy report -o zap_report.html -f html

    - name: Log Issues to GitHub
      run: |
        # Use the ZAP GitHub Issue Creator add-on to log issues
        zap-cli --zap-url http://localhost:8080 --zap-path /usr/share/zaproxy github-issue-creator --repo edwillis/vie --token ${{ secrets.PAT_ZAP_SECRET }} 
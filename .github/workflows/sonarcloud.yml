name: SonarCloud Analysis

on:
  push:
    branches:
      - '**'  # Triggers on push to any branch
  pull_request:
    branches:
      - master  # Triggers on PRs targeting the master branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install os dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libcairo2-dev libgirepository1.0-dev libgrpc-dev libprotobuf-dev libgrpc++-dev 
        sudo apt-get install -y build-essential autoconf libtool pkg-config cmake doxygen
        sudo apt-get install -y libgrpc-dev protobuf-compiler protobuf-compiler-grpc mkcert

    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python_services/terrain_generation/requirements.txt
        pip install -r python_services/persistence/requirements.txt
        
    - name: Install javascript dependencies
      run: |
        cd javascript_services/vie_ui
        npm install
        chmod +x node_modules/.bin/protoc-gen-js || echo "File not found or already executable"
        chmod +x node_modules/.bin/protoc-gen-grpc-web || echo "File not found or already executable"
        echo "PATH=$PWD/node_modules/.bin:$PATH" >> $GITHUB_ENV
        # Create symlinks to standard locations as fallback
        sudo mkdir -p /usr/local/bin
        sudo ln -sf $PWD/node_modules/.bin/protoc-gen-js /usr/local/bin/ || echo "Could not create symlink"
        sudo ln -sf $PWD/node_modules/.bin/protoc-gen-grpc-web /usr/local/bin/ || echo "Could not create symlink"

    - name: Install mkcert
      run: |
        mkcert -install

    - name: Install CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.28.3'  # Specify the required CMake version

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake
      run: cmake -S . -B build

    - name: Build with CMake
      run: cmake --build build
    # must happen here so the cert is created which the tests depend on
    - name: Start application
      run: ./script/start.sh &
    
    - name: Run tests with Coverage
      working-directory: build
      run: make run_tests

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        token: ${{ secrets.PAT_ZAP_SECRET }}
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        cmd_options: '-a'
        target: 'http://localhost:3000'

    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: report_html.html
        path: report_html.html

name: SonarCloud Analysis

on:
  push:
    branches:
      - '**'  # Triggers on push to any branch
  pull_request:
    branches:
      - master  # Triggers on PRs targeting the master branch

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install os dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mkcert libcairo2-dev libgirepository1.0-dev libgrpc-dev libprotobuf-dev libgrpc++-dev \
            build-essential autoconf libtool pkg-config cmake doxygen libgrpc-dev protobuf-compiler protobuf-compiler-grpc 

  install-envoy:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Install Envoy
        run: |
          echo "Installing Envoy binary directly"
          curl -Lo /tmp/envoy https://github.com/envoyproxy/envoy/releases/download/v1.32.1/envoy-1.32.1-linux-x86_64
          sudo install -m 755 /tmp/envoy /usr/local/bin/envoy
          envoy --version

  setup-python:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('python_services/**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r python_services/terrain_generation/requirements.txt
          pip install -r python_services/persistence/requirements.txt

  setup-javascript:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Cache JavaScript dependencies
        uses: actions/cache@v3
        with:
          path: javascript_services/vie_ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('javascript_services/vie_ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install javascript dependencies
        run: |
          cd javascript_services/vie_ui
          npm install
          chmod +x node_modules/.bin/protoc-gen-js || echo "File not found or already executable"
          chmod +x node_modules/.bin/protoc-gen-grpc-web || echo "File not found or already executable"
          echo "PATH=$PWD/node_modules/.bin:$PATH" >> $GITHUB_ENV
          sudo mkdir -p /usr/local/bin
          sudo ln -sf $PWD/node_modules/.bin/protoc-gen-js /usr/local/bin/ || echo "Could not create symlink"
          sudo ln -sf $PWD/node_modules/.bin/protoc-gen-grpc-web /usr/local/bin/ || echo "Could not create symlink"

  setup-ssl:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Cache mkcert data
        uses: actions/cache@v3
        with:
          path: ~/Library/Application Support/mkcert
          key: ${{ runner.os }}-mkcert

      - name: Install mkcert
        run: |
          mkcert -install

      - name: Cache SSL certificates
        uses: actions/cache@v3
        with:
          path: certs
          key: ${{ runner.os }}-ssl-certs

      - name: Generate SSL certificates
        run: |
          mkdir -p certs
          mkcert -install
          mkcert -cert-file certs/localhost.pem -key-file certs/localhost-key.pem localhost 127.0.0.1 ::1

  setup-cmake:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.28.3'

      - name: Cache CMake build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt', 'python_services/**/*.proto') }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: Create build directory
        run: mkdir -p build

      - name: Configure CMake
        run: cmake -S . -B build

  build:
    runs-on: ubuntu-latest
    needs: [install-envoy, setup-python, setup-javascript, setup-ssl, setup-cmake]
    steps:
      - name: Build with CMake
        run: cmake --build build -j $(nproc)

  test-and-report:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Run tests
        run: |
          cd build && make run_tests
        id: tests

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  zap-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Start application
        run: |
          ./script/start.sh
          echo "Waiting for app to fully initialize..."
          sleep 10

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.PAT_ZAP_SECRET }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          cmd_options: '-a -z "certificate.accept.unsecure.certs=true" -I'
          target: 'https://localhost:3001'
          allow_issue_writing: true

      - name: Stop application
        if: always()
        continue-on-error: true
        run: |
          ./script/stop.sh

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: "report_html.html"
          if-no-files-found: warn

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # Cancels pending/running workflows when new pushes happen

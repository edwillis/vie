name: SonarCloud Analysis

on:
  push:
    branches:
      - '**'  # Triggers on push to any branch
  pull_request:
    branches:
      - master  # Triggers on PRs targeting the master branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Setup phase
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Setup Environment
      run: |
        setup_os_and_python_environment() {
          echo "Caching apt packages..."
          sudo mkdir -p /var/cache/apt/archives
          sudo apt-get update
          sudo apt-get install -y -o dir::cache::archives=/var/cache/apt/archives \
            libcairo2-dev libgirepository-2.0-dev libgrpc-dev libprotobuf-dev libgrpc++-dev \
            build-essential autoconf libtool pkg-config cmake doxygen \
            libgrpc-dev protobuf-compiler protobuf-compiler-grpc mkcert python3-gi gir1.2-gtk-3.0

          echo "Installing Envoy..."
          curl -Lo /tmp/envoy https://github.com/envoyproxy/envoy/releases/download/v1.32.1/envoy-1.32.1-linux-x86_64
          sudo install -m 755 /tmp/envoy /usr/local/bin/envoy
          envoy --version

          echo "Setting up Python..."
          python_version='3.12'
          echo "Installing Python $python_version"
          sudo apt-get install -y python$python_version

          echo "Caching Python dependencies..."
          pip_cache_dir=~/.cache/pip
          mkdir -p $pip_cache_dir
          key: ${{ runner.os }}-pip-${{ hashFiles('python_services/**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
          
          echo "Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r python_services/terrain_generation/requirements.txt
          pip install -r python_services/persistence/requirements.txt
        }

        setup_javascript_environment() {
          echo "Caching JavaScript dependencies..."
          npm_cache_dir=~/.npm
          mkdir -p $npm_cache_dir
          with:
            path: javascript_services/vie_ui/node_modules
            key: ${{ runner.os }}-node-${{ hashFiles('javascript_services/vie_ui/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-
            
          echo "Installing JavaScript dependencies..."
          cd javascript_services/vie_ui
          npm install 
          chmod +x node_modules/.bin/protoc-gen-js || echo "File not found or already executable"
          chmod +x node_modules/.bin/protoc-gen-grpc-web || echo "File not found or already executable"
          echo "PATH=$PWD/node_modules/.bin:$PATH" >> $GITHUB_ENV
          # Create symlinks to standard locations as fallback
          sudo mkdir -p /usr/local/bin
          sudo ln -sf $PWD/node_modules/.bin/protoc-gen-js /usr/local/bin/ || echo "Could not create symlink"
          sudo ln -sf $PWD/node_modules/.bin/protoc-gen-grpc-web /usr/local/bin/ || echo "Could not create symlink"
        }

        setup_mkcert_and_cmake() {
          echo "Caching mkcert data..."
          mkcert_cache_dir=~/Library/Application\ Support/mkcert
          mkdir -p "$mkcert_cache_dir"
          with:
            path: ~/Library/Application Support/mkcert
            key: ${{ runner.os }}-mkcert
            
          echo "Installing mkcert..."
          mkcert -install

          echo "Installing CMake..."
          cmake_version='3.28.3'
          curl -Lo /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$cmake_version/cmake-$cmake_version-Linux-x86_64.sh
          sudo sh /tmp/cmake.sh --skip-license --prefix=/usr/local
          cmake --version
        }

        # Call each setup function in the background and track PIDs
        setup_os_and_python_environment &
        pid1=$!

        setup_javascript_environment &
        pid2=$!

        setup_mkcert_and_cmake &
        pid3=$!

        # Wait for all background processes to complete
        wait $pid1 $pid2 $pid3

    - name: Cache CMake build
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt', 'python_services/**/*.proto') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Create build directory
      run: mkdir -p build

    - name: Configure CMake
      run: cmake -S . -B build

    - name: Build with CMake
      run: cmake --build build 

    # Cache SSL certificates
    - name: Cache SSL certificates
      uses: actions/cache@v3
      with:
        path: certs
        key: ${{ runner.os }}-ssl-certs
        
    # Generate SSL certificates
    - name: Generate SSL certificates
      run: |
        mkdir -p certs
        mkcert -install
        mkcert -cert-file certs/localhost.pem -key-file certs/localhost-key.pem localhost 127.0.0.1 ::1

    - name: Run Tests and Start Application
      run: |
        run_tests() {
          echo "Running tests..."
          cd build && make run_tests
        }

        start_application_and_zap_scan() {
          echo "Starting application..."
          ./script/start.sh
          echo "Waiting for app to fully initialize..."
          sleep 10

          echo "Running ZAP Full Scan..."
          zaproxy/action-full-scan@v0.12.0 \
            --token ${{ secrets.PAT_ZAP_SECRET }} \
            --docker_name 'ghcr.io/zaproxy/zaproxy:stable' \
            --cmd_options '-a -z "certificate.accept.unsecure.certs=true" -I' \
            --target 'https://localhost:3001' \
            --allow_issue_writing true
        }
        # Call test and application functions in the background and track PIDs
        run_tests &
        pid1=$!

        start_application_and_zap_scan &
        pid2=$!
  
        # Wait for all background processes to complete
        wait $pid1 $pid2
  

    # Stop the app in a cleanup step
    - name: Stop application
      if: always()
      continue-on-error: true
      run: |
        ./script/stop.sh

    # Upload results
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: "report_html.html"  # Use the default filename
        if-no-files-found: warn

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # Cancels pending/running workflows when new pushes happen

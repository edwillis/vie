name: SonarCloud Analysis

on:
  push:
    branches:
      - '**'  # Triggers on push to any branch
  pull_request:
    branches:
      - master  # Triggers on PRs targeting the master branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    # Setup phase
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    # Restore Python dependencies cache
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('python_services/**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Restore Node.js dependencies cache
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('javascript_services/vie_ui/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Restore mkcert cache
    - name: Cache mkcert data
      uses: actions/cache@v3
      with:
        path: ~/Library/Application Support/mkcert
        key: ${{ runner.os }}-mkcert

    - name: Setup Environment
      run: |
        setup_os_and_python_environment() {
          echo "Installing system packages..."
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libgirepository-2.0-dev libgrpc-dev libprotobuf-dev libgrpc++-dev \
            build-essential autoconf libtool pkg-config cmake doxygen \
            libgrpc-dev protobuf-compiler protobuf-compiler-grpc mkcert python3-gi gir1.2-gtk-3.0

          echo "Installing Envoy..."
          curl -Lo /tmp/envoy https://github.com/envoyproxy/envoy/releases/download/v1.32.1/envoy-1.32.1-linux-x86_64
          sudo install -m 755 /tmp/envoy /usr/local/bin/envoy
          envoy --version

          echo "Installing mkcert..."
          mkcert -install

          echo "Setting up Python..."
          python_version='3.12'
          sudo apt-get install -y python$python_version
          python -m pip install --upgrade pip
          pip install -r python_services/terrain_generation/requirements.txt
          pip install -r python_services/persistence/requirements.txt
        }

        setup_javascript_environment() {
          echo "Installing JavaScript dependencies..."
          cd javascript_services/vie_ui
          npm install
          chmod +x node_modules/.bin/protoc-gen-js || echo "File not found or already executable"
          chmod +x node_modules/.bin/protoc-gen-grpc-web || echo "File not found or already executable"
          echo "PATH=$PWD/node_modules/.bin:$PATH" >> $GITHUB_ENV
          sudo ln -sf $PWD/node_modules/.bin/protoc-gen-js /usr/local/bin/ || echo "Could not create symlink"
          sudo ln -sf $PWD/node_modules/.bin/protoc-gen-grpc-web /usr/local/bin/ || echo "Could not create symlink"
        }

        setup_cmake() {
          echo "Installing CMake..."
          cmake_version='3.28.3'
          curl -Lo /tmp/cmake.sh https://github.com/Kitware/CMake/releases/download/v$cmake_version/cmake-$cmake_version-Linux-x86_64.sh
          sudo sh /tmp/cmake.sh --skip-license --prefix=/usr/local
          cmake --version
        }

        # Call each setup function in the background and use process substitution with tee
        setup_os_and_python_environment > >(tee os_setup.log) 2> >(tee os_setup.err >&2) &
        pid1=$!

        setup_javascript_environment > >(tee js_setup.log) 2> >(tee js_setup.err >&2) &
        pid2=$!

        setup_cmake > >(tee cmake_setup.log) 2> >(tee cmake_setup.err >&2) &
        pid3=$!

        # Wait for all background processes to complete
        wait $pid1 || { echo "setup_os_and_python_environment failed"; cat os_setup.log; cat os_setup.err; exit 1; }
        wait $pid2 || { echo "setup_javascript_environment failed"; cat js_setup.log; cat js_setup.err; exit 1; }
        wait $pid3 || { echo "setup_cmake failed"; cat mkcert_cmake_setup.log; cat mkcert_cmake_setup.err; exit 1; }

    # Save Python dependencies cache
    - name: Save Python dependencies cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('python_services/**/requirements.txt') }}

    # Save Node.js dependencies cache
    - name: Save Node.js dependencies cache
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('javascript_services/vie_ui/package-lock.json') }}

    # Save mkcert cache
    - name: Save mkcert cache
      uses: actions/cache@v3
      with:
        path: ~/Library/Application Support/mkcert
        key: ${{ runner.os }}-mkcert

    - name: Cache CMake build
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-cmake-${{ hashFiles('CMakeLists.txt', 'python_services/**/*.proto') }}
        restore-keys: |
          ${{ runner.os }}-cmake-

    - name: Create build directory
      run: mkdir -p build

    - name: Configure CMake
      run: cmake -S . -B build

    - name: Build with CMake
      run: cmake --build build 

    # Cache SSL certificates
    - name: Cache SSL certificates
      uses: actions/cache@v3
      with:
        path: certs
        key: ${{ runner.os }}-ssl-certs
        
    # Generate SSL certificates
    - name: Generate SSL certificates
      run: |
        mkdir -p certs
        mkcert -install
        mkcert -cert-file certs/localhost.pem -key-file certs/localhost-key.pem localhost 127.0.0.1 ::1

    - name: Run Tests and ZAP Test Application
      run: |
        run_tests() {
          echo "Running tests..."
          cd build && make run_tests
        }

        start_application_and_zap_scan() {
          echo "Starting application..."
          ./script/start.sh &  # Run the application start script in the background
          echo "Waiting for app to fully initialize..."
          sleep 10

          # Create the reports directory with proper permissions
          mkdir -p reports
          chmod 777 reports  # Ensure the directory is writable by any user

          echo "Running ZAP Full Scan..."
          docker run --rm \
            --network="host" \
            -v "$(pwd)/reports:/zap/wrk/:rw" \
            -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
            -t https://localhost:3001 \
            -r /zap/wrk/zap-report.html \
            -z "certificate.accept.unsecure.certs=true" \
            -I -a
          
          # Explicitly capture Docker's exit code
          DOCKER_EXIT_CODE=$?
          if [ $DOCKER_EXIT_CODE -ne 0 ]; then
            echo "ZAP scan failed with exit code $DOCKER_EXIT_CODE"
            return $DOCKER_EXIT_CODE
          fi
        }

        # Call test and application functions in the background and use process substitution with tee
        run_tests > >(tee run_tests.log) 2> >(tee run_tests.err >&2) &
        pid1=$!

        start_application_and_zap_scan > >(tee zap_scan.log) 2> >(tee zap_scan.err >&2) &
        pid2=$!

        # Function to wait with timeout
        wait_with_timeout() {
          local pid=$1
          local timeout=$2
          local start_time=$(date +%s)

          while kill -0 $pid 2>/dev/null; do
            sleep 1
            local current_time=$(date +%s)
            if (( current_time - start_time > timeout )); then
              echo "Process $pid timed out"
              kill -9 $pid
              return 1
            fi
          done
          return 0
        }

        # Wait for all background processes to complete with a timeout
        wait_with_timeout $pid1 600 || { echo "run_tests failed"; cat run_tests.log; cat run_tests.err; exit 1; }
        wait_with_timeout $pid2 1200 || { echo "start_application_and_zap_scan failed"; cat zap_scan.log; cat zap_scan.err; exit 1; }

    # Stop the app in a cleanup step
    - name: Stop application
      if: always()
      continue-on-error: true
      run: |
        ./script/stop.sh

    # Upload results
    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload ZAP report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: "report_html.html"  # Use the default filename
        if-no-files-found: warn

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # Cancels pending/running workflows when new pushes happen
